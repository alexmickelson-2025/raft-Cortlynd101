@page "/"
@using Raft_5._2_Class_Library;
@rendermode InteractiveServer
@inject IJSRuntime JS

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

<button @onclick="startSimulation">Start Simulation</button>
<div>
    <label for="speed">
        Election timeout: @IntervalScaler
        <br>
        <input type="range" id="speed" name="speed" min="1" max="5" @bind:event="oninput"
        @bind=IntervalScaler @onchange=UpdateIntervalScaler />
    </label>
</div>
<div>
    <label for="delay">
        Delay: @delay
        <br>
        <input type="range" id="NetworkRequestDelay" name="NetworkRequestDelay" min="10" max="100"
        @bind:event="oninput" @bind=delay />
    </label>
</div>
@foreach (var node in nodes)
{
    <div class="p-3 col-4">
        <div class="border p-3 rounded-3">
            <div>
                Id: @node.Id
            </div>
            <div>
                Election timeout: @node.electionTimeout
            </div>
            <div>
                Node state: @node.serverType
            </div>
            <div>
                Node term: @node.term
            </div>
            <div>
                Node they think is the leader: @node.leaderId
            </div>
            <div>
                State: 
                @if (node.responsive)
                {
                    <div>
                        Responsive.
                    </div>
                }
                else
                {
                    <div>
                        Unresponsive.
                    </div>
                }
            </div>
            <div>
                Commit index: @node.committedIndex
            </div>
            <div>
                Log entries:
                @foreach(var log in node.log)
                {
                    <div class="row border p-3 rounded-3">
                        <div>
                            Log index: @log.Key
                        </div>
                        <div>
                            Term id: @log.Key
                        </div>
                        <div>
                            Log value: @log.Value
                        </div>
                        <div>
                            Log committed: @(log.Key >= node.committedIndex)
                        </div>
                    </div>
                }
            </div>
            <div class="border p-3 rounded-3">
                <input type="text" id="value" name="value" @bind:event="oninput" @bind=value />
                <button @onclick="() => Set(node.Id, value)">Set Next Log Entry</button>
            </div>
            <div class="border p-3 rounded-3">
                <button @onclick="() => TogglePause(node.Id)">Toggle Pause</button>
            </div>
        </div>
    </div>
}

@code {
    public int IntervalScaler = 0;
    public int delay = 0;
    public string value = "";
    private Timer? timer;
    public SimulationCluster cluster = new(new Cluster());
    public List<INode> nodes = [];
    void startSimulation()
    {
        var node1 = new Node();
        var node2 = new Node();
        var node3 = new Node();
        var node4 = new Node();
        var node5 = new Node();

        var simulation1 = new SimulationNode(node1);
        var simulation2 = new SimulationNode(node2);
        var simulation3 = new SimulationNode(node3);
        var simulation4 = new SimulationNode(node4);
        var simulation5 = new SimulationNode(node5);

        nodes = [simulation1.InnerNode, simulation2.InnerNode, simulation3.InnerNode, simulation4.InnerNode, simulation5.InnerNode];
        StateHasChanged();

        timer = new Timer(_ =>
        {
            cluster.runCluster(nodes);
            InvokeAsync(StateHasChanged);
        }, null, 0, 300);
    }
    private void UpdateIntervalScaler(ChangeEventArgs e)
    {
        foreach(var node in nodes)
        {
            node.intervalScaler = IntervalScaler;
        }
    }
    private async void Set(int id, string value)
    {
        string message = $"Node response: {nodes[id].Set(value)}";
        await JS.InvokeVoidAsync("alert", message);
        return;
    }
    private void TogglePause(int id)
    {
        if (nodes[id].responsive)
        {
            nodes[id].Pause(nodes, id);
        }
        else
        {
            nodes[id].UnPause(cluster.InnerCluster, nodes, id);
        }
    }
}

