@page "/"
@rendermode InteractiveServer
@using System.Collections.Concurrent
@using Raft_5._2_Class_Library
@inject RaftService RaftService

<PageTitle>Home</PageTitle>

<div>
    @if (Urls is not null)
    {
        foreach(var url in Urls)
        {
            <div>
                @url.ToString();
            </div>
        }
    }
</div>

@if (nodes is not null)
{
    @foreach (var node in nodes)
    {
        <div class="p-3 col-4">
            <div class="border p-3 rounded-3">
                <div>
                    Id: @node.id
                </div>
                <div>
                    Election timeout: @node.electionTimeout
                </div>
                <div>
                    Node state: @node.status
                </div>
                <div>
                    Node term: @node.term
                </div>
                <div>
                    Node they think is the leader: @node.currentTermLeader
                </div>
                <div>
                    State: 
                    @if (node.responsive)
                    {
                        <div>
                            Responsive.
                        </div>
                    }
                    else
                    {
                        <div>
                            Unresponsive.
                        </div>
                    }
                </div>
                <div>
                    Commit index: @node.committedEntryIndex
                </div>
                <div>
                    Log entries:
                    @foreach(var log in node.log)
                    {
                        <div class="row border p-3 rounded-3">
                            <div>
                                Log index: @log.Key
                            </div>
                            <div>
                                Term id: @log.Key
                            </div>
                            <div>
                                Log value: @log.Value
                            </div>
                            <div>
                                Log committed: @(log.Key >= node.committedEntryIndex)
                            </div>
                        </div>
                    }
                </div>
                @* <div class="border p-3 rounded-3">
                    <input type="text" id="value" name="value" @bind:event="oninput" @bind=value />
                    <button @onclick="() => Set(node.Id, value)">Set Next Log Entry</button>
                </div>
                <div class="border p-3 rounded-3">
                    <button @onclick="() => TogglePause(node.Id)">Toggle Pause</button>
                </div> *@
            </div>
        </div>
    }
}

@code {
    private Timer? timer;
    public Cluster cluster = new();
    public List<NodeData> nodes = [];
    HttpClient http = new HttpClient();
    NodeData node1data;
    NodeData node2data;
    NodeData node3data;

    string[] Urls = Environment.GetEnvironmentVariable("NODE_URLS").Split(',');
    ConcurrentDictionary<string, NodeData> data = new();
    
    @* string StateClass(NodeData node)
    {
        if(node.serverType == "leader")
        {
            return "text-primary";
        }
        if(node.serverType == "candidate")
        {
            return "text-secondary";
        }
        if(node.serverType == "follower")
        {
            return "text-primary";
        }
    } *@

    string TermClass(NodeData node)
    {
        return "";
    }
    protected override async Task OnInitializedAsync()
    {
        @* timer = new Timer(async _ => 
        {
            node1data = await RaftService.GetDataFromApi(Urls[0]);
            node2data = await RaftService.GetDataFromApi(Urls[1]);
            node3data = await RaftService.GetDataFromApi(Urls[2]);
        }, null, 0, 200);

        nodes.Add(node1data);
        nodes.Add(node2data);
        nodes.Add(node3data); *@

        @* timer = new Timer(async _ => 
        {
            await Task.WhenAll(
                Urls.Select(async url => 
                {
                    try
                    {
                        var nodeData = await http.GetFromJsonAsync<NodeData>(url);
                        if (nodeData != null)
                        {
                            data[url] = nodeData;
                        }
                        else
                        {
                            Console.WriteLine("Node is null: ", url);
                        }
                        
                    }
                    catch (HttpRequestException)
                    {
                        Console.WriteLine($"Node {url} is unresponsive.");
                        data.TryRemove(url, out var removedNodeData);
                    }
                }).ToArray()
            );
            await InvokeAsync(StateHasChanged);
        }, null, 0, 200); *@
    }
}